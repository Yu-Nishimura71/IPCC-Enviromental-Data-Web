// <auto-generated />
using System;
using Assig2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assig2.Migrations
{
    [DbContext(typeof(EnvDataContext))]
    partial class EnvDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assig2.Models.AirQualityData", b =>
                {
                    b.Property<int>("AqdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("aqdID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AqdId"), 1L, 1);

                    b.Property<int?>("AnnualMean")
                        .HasColumnType("int")
                        .HasColumnName("annualMean");

                    b.Property<string>("AnnualMeanPm10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("annualMeanPM10");

                    b.Property<string>("AnnualMeanPm25")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("annualMeanPM25");

                    b.Property<int?>("AnnualMeanUgm3")
                        .HasColumnType("int")
                        .HasColumnName("annualMean_ugm3");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<int?>("DbYear")
                        .HasColumnType("int")
                        .HasColumnName("dbYear");

                    b.Property<string>("Reference")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reference");

                    b.Property<int?>("RowId")
                        .HasColumnType("int")
                        .HasColumnName("rowID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("TemporalCoverage1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TemporalCoverage2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("AqdId")
                        .HasName("AirQualityData_PK");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "RowId" }, "AirQualityData_UK")
                        .IsUnique()
                        .HasFilter("[rowID] IS NOT NULL");

                    b.ToTable("AirQualityData");
                });

            modelBuilder.Entity("Assig2.Models.AirQualityStation", b =>
                {
                    b.Property<int>("StationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("stationTypeID");

                    b.Property<int>("AqdId")
                        .HasColumnType("int")
                        .HasColumnName("aqdID");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("StationTypeId", "AqdId")
                        .HasName("AirQualityStations_PK");

                    b.HasIndex("AqdId");

                    b.ToTable("AirQualityStations");
                });

            modelBuilder.Entity("Assig2.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cityName");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("countryID");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Assig2.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("countryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("countryName");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Iso3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("iso3");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("regionID");

                    b.HasKey("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "CountryName" }, "countries_countryName_UK")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Assig2.Models.CountryEmission", b =>
                {
                    b.Property<int>("CeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CeId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("countryID");

                    b.Property<int>("ElementId")
                        .HasColumnType("int")
                        .HasColumnName("elementID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("value");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("CeId")
                        .HasName("countryEmissions_PK");

                    b.HasIndex("CountryId");

                    b.HasIndex("ItemId", "ElementId");

                    b.ToTable("CountryEmissions");
                });

            modelBuilder.Entity("Assig2.Models.Element", b =>
                {
                    b.Property<int>("ElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("elementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElementId"), 1L, 1);

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("elementName");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("ElementId");

                    b.HasIndex(new[] { "ElementName" }, "Elements_UK")
                        .IsUnique();

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("Assig2.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("itemName");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentID");

                    b.HasKey("ItemId");

                    b.HasIndex("ParentId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Assig2.Models.ItemElement", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("ElementId")
                        .HasColumnType("int")
                        .HasColumnName("elementID");

                    b.HasKey("ItemId", "ElementId")
                        .HasName("itemElements_PK");

                    b.HasIndex("ElementId");

                    b.ToTable("ItemElements");
                });

            modelBuilder.Entity("Assig2.Models.MonitorStationType", b =>
                {
                    b.Property<int>("StationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationTypeId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("stationType");

                    b.HasKey("StationTypeId")
                        .HasName("monitorStationTypes_PK");

                    b.HasIndex(new[] { "StationType" }, "monitorStationTypes_UK")
                        .IsUnique();

                    b.ToTable("MonitorStationTypes");
                });

            modelBuilder.Entity("Assig2.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("regionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("regionName");

                    b.HasKey("RegionId");

                    b.HasIndex(new[] { "RegionName" }, "regions_UK")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Assig2.Models.TemperatureData", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("countryID");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.Property<string>("Change")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("change");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("objectID");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("value");

                    b.HasKey("CountryId", "Year")
                        .HasName("temperatureData_PK");

                    b.ToTable("TemperatureData");
                });

            modelBuilder.Entity("Assig2.Models.AirQualityData", b =>
                {
                    b.HasOne("Assig2.Models.City", "City")
                        .WithMany("AirQualityData")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("AirQualityData_Cities_FK");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Assig2.Models.AirQualityStation", b =>
                {
                    b.HasOne("Assig2.Models.AirQualityData", "Aqd")
                        .WithMany("AirQualityStations")
                        .HasForeignKey("AqdId")
                        .IsRequired()
                        .HasConstraintName("AirQualityStations_Data");

                    b.HasOne("Assig2.Models.MonitorStationType", "StationType")
                        .WithMany("AirQualityStations")
                        .HasForeignKey("StationTypeId")
                        .IsRequired()
                        .HasConstraintName("AirQualityStations_Stations_FK");

                    b.Navigation("Aqd");

                    b.Navigation("StationType");
                });

            modelBuilder.Entity("Assig2.Models.City", b =>
                {
                    b.HasOne("Assig2.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("cities_countries_FK");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Assig2.Models.Country", b =>
                {
                    b.HasOne("Assig2.Models.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("countries_Region_FK");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Assig2.Models.CountryEmission", b =>
                {
                    b.HasOne("Assig2.Models.Country", "Country")
                        .WithMany("CountryEmissions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("countryEmissions_country_FK");

                    b.HasOne("Assig2.Models.ItemElement", "ItemElement")
                        .WithMany("CountryEmissions")
                        .HasForeignKey("ItemId", "ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("countryEmissions_ItemElement_FK");

                    b.Navigation("Country");

                    b.Navigation("ItemElement");
                });

            modelBuilder.Entity("Assig2.Models.Item", b =>
                {
                    b.HasOne("Assig2.Models.Item", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("Items_Parent_FK");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Assig2.Models.ItemElement", b =>
                {
                    b.HasOne("Assig2.Models.Element", "Element")
                        .WithMany("ItemElements")
                        .HasForeignKey("ElementId")
                        .IsRequired()
                        .HasConstraintName("itemElements_element_FK");

                    b.HasOne("Assig2.Models.Item", "Item")
                        .WithMany("ItemElements")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("itemElements_item_FK");

                    b.Navigation("Element");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Assig2.Models.TemperatureData", b =>
                {
                    b.HasOne("Assig2.Models.Country", "Country")
                        .WithMany("TemperatureData")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("temperatureData_Countries_FK");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Assig2.Models.AirQualityData", b =>
                {
                    b.Navigation("AirQualityStations");
                });

            modelBuilder.Entity("Assig2.Models.City", b =>
                {
                    b.Navigation("AirQualityData");
                });

            modelBuilder.Entity("Assig2.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryEmissions");

                    b.Navigation("TemperatureData");
                });

            modelBuilder.Entity("Assig2.Models.Element", b =>
                {
                    b.Navigation("ItemElements");
                });

            modelBuilder.Entity("Assig2.Models.Item", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("ItemElements");
                });

            modelBuilder.Entity("Assig2.Models.ItemElement", b =>
                {
                    b.Navigation("CountryEmissions");
                });

            modelBuilder.Entity("Assig2.Models.MonitorStationType", b =>
                {
                    b.Navigation("AirQualityStations");
                });

            modelBuilder.Entity("Assig2.Models.Region", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
